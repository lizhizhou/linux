
# Some constants used further below
#
export LOPHILO_DIR:=${HOME}/lophilo
export LINUX_DIRNAME:=$(shell basename `pwd`)
export FIRMWARE_DIRNAME:=${LOPHILO_DIR}/firmware-binaries
export KCONFIG_CONFIG_STANDARD:=lophilo_boot.config
export KCONFIG_CONFIG_DEBUG:=lophilo_boot_debug.config
export KERNELVERSION:=$(shell make kernelversion)
export GITDESCRIBE:=$(shell git describe)

#
# Kernel build variables
# 
export ARCH:=arm
export CONCURRENCY_LEVEL:=8
export KBUILD_OUTPUT_STANDARD:=${LOPHILO_DIR}/obj/${LINUX_DIRNAME}
export KBUILD_OUTPUT_DEBUG:=${LOPHILO_DIR}/obj/${LINUX_DIRNAME}-debug
export CROSS_COMPILE:=${LOPHILO_DIR}/codesourcery/arm926ej-s/

#
# Output variables
#
export STANDARD_IMAGE_FN:=zImage
export DEBUG_IMAGE_FN:=zImage-debug

export STANDARD_IMAGE:=${KBUILD_OUTPUT_STANDARD}/arch/arm/boot/${STANDARD_IMAGE_FN}
export VMLINUX_IMAGE:=${KBUILD_OUTPUT_STANDARD}/vmlinux
# debug image in output dir is the same as standard, we'll rename on copy
export DEBUG_IMAGE:=${KBUILD_OUTPUT_DEBUG}/arch/arm/boot/${STANDARD_IMAGE_FN}
export DEBUG_VMLINUX_IMAGE:=${KBUILD_OUTPUT_DEBUG}/vmlinux

#
# Installation related variables
#
export TARGET_NFS_INSTALL_DIR:=${HOME}/lophilo.nfs
export TARGET_INSTALL_DIR:=${HOME}/current_image

export NOW:=$(shell date +%Y%m%d-%s)

#
# Other programs
#
export RSYNC:=rsync -avz --exclude="*.log" --exclude="*.pid" --exclude="*.leases" --exclude="var/log/*" --delete

.PHONY: clean config menuconfig version kernel debian install-debian install-squeeze1 backup archive-source archive-image firmware linux-src linux-src-git

all: firmware setup-nfs-dir
	@echo "Cross-compilation source: ${CROSS_COMPILE}"
	@echo "Firmware output location: ${FIRMWARE_DIRNAME}"
	@echo "Standard zImage location: ${STANDARD_IMAGE}"
	@echo "Debug zImage location: ${DEBUG_IMAGE}"
	@echo "Lophilo OS directory: ${TARGET_NFS_INSTALL_DIR}"

#
# Standard kernel 
#
export STANDARD_MAKE_PARAMS:=KCONFIG_CONFIG=`pwd`/${KCONFIG_CONFIG_STANDARD}  KBUILD_OUTPUT=${KBUILD_OUTPUT_STANDARD}
${KBUILD_OUTPUT_STANDARD}:
	mkdir -p ${KBUILD_OUTPUT_STANDARD}

standard_config: ${KBUILD_OUTPUT_STANDARD}
	make ${STANDARD_MAKE_PARAMS} oldconfig

standard_menuconfig: ${KBUILD_OUTPUT_STANDARD}
	make ${STANDARD_MAKE_PARAMS} menuconfig

standard_modules: ${KCONFIG_CONFIG_STANDARD} ${KBUILD_OUTPUT_STANDARD}/modules.order ${KBUILD_OUTPUT_STANDARD}

standard_kernel: ${STANDARD_IMAGE} standard_modules ${KBUILD_OUTPUT_STANDARD}

${KBUILD_OUTPUT_STANDARD}/modules.order: ${KCONFIG_CONFIG_STANDARD}
	make modules ${STANDARD_MAKE_PARAMS}

${STANDARD_IMAGE}: ${KCONFIG_CONFIG_STANDARD}
	mkdir -p ${KBUILD_OUTPUT_STANDARD}
	time make zImage ${STANDARD_MAKE_PARAMS}

#
# debug kernel 
#
export DEBUG_MAKE_PARAMS:=KCONFIG_CONFIG=`pwd`/${KCONFIG_CONFIG_DEBUG}  KBUILD_OUTPUT=${KBUILD_OUTPUT_DEBUG}
${KBUILD_OUTPUT_DEBUG}:
	mkdir -p ${KBUILD_OUTPUT_DEBUG}

debug_config: ${KBUILD_OUTPUT_DEBUG}
	make ${DEBUG_MAKE_PARAMS} oldconfig

debug_menuconfig: ${KBUILD_OUTPUT_DEBUG}
	make ${DEBUG_MAKE_PARAMS} menuconfig

debug_modules: ${KCONFIG_CONFIG_DEBUG} ${KBUILD_OUTPUT_DEBUG}/modules.order

debug_kernel: ${DEBUG_IMAGE} debug_modules ${KBUILD_OUTPUT_DEBUG}

${KBUILD_OUTPUT_DEBUG}/modules.order: ${KCONFIG_CONFIG_DEBUG}
	make modules ${DEBUG_MAKE_PARAMS}

${DEBUG_IMAGE}: ${KCONFIG_CONFIG_DEBUG}
	mkdir -p ${KBUILD_OUTPUT_DEBUG}
	time make zImage ${DEBUG_MAKE_PARAMS}

# backup source directory
# TODO: find a way to do this quickly (rsync?)
${FIRMWARE_DIRNAME}/src/linux-src-${GITDESCRIBE}.zip: ${STANDARD_IMAGE}
	mkdir -p ${FIRMWARE_DIRNAME}/src
	git archive HEAD --format=zip > $@
	@echo "find the linux src archive in $@"

linux-src: ${FIRMWARE_DIRNAME}/src/linux-src-${GITDESCRIBE}.zip

# create git clone archive
${HOME}/src/linux-src-git-${GITDESCRIBE}.tgz: ${STANDARD_IMAGE}
	mkdir -p ${HOME}/src
	git clone -l . ${HOME}/src/linux-src-git-${GITDESCRIBE}
	tar cvfz ${HOME}/src/linux-src-git-${GITDESCRIBE} $@
	@echo "find the linux src git archive in $@"

linux-src-git: ${HOME}/src/linux-src-git-${GITDESCRIBE}.tgz

#
# copy to firmware-binaries repo
#
firmware: ${STANDARD_IMAGE} ${DEBUG_IMAGE}
	cp ${STANDARD_IMAGE} ${FIRMWARE_DIRNAME}/${STANDARD_IMAGE_FN}
	cp ${DEBUG_IMAGE} ${FIRMWARE_DIRNAME}/${DEBUG_IMAGE_FN}
	cp ${VMLINUX_IMAGE} ${FIRMWARE_DIRNAME}/
	cp ${DEBUG_VMLINUX_IMAGE} ${FIRMWARE_DIRNAME}/vmlinux-debug
	git describe > ${FIRMWARE_DIRNAME}/kernel.txt
	@echo "Don't forget to generate a source archive with: makel linux-src"

#
# setup TARGET_INSTALL_DIR
#
RSYNC_INSTALL=sudo rsync -avz --delete-delay  --exclude=.gitignore

setup-target-dir: ${STANDARD_IMAGE} standard_modules ${DEBUG_IMAGE} debug_modules ../firmware-binaries/boot.bin ../firmware-binaries/grid.rbf
	-rm -fr ${TARGET_INSTALL_DIR}/
	mkdir -p ${TARGET_INSTALL_DIR}/boot
	cp ${STANDARD_IMAGE} ${TARGET_INSTALL_DIR}/boot
	cp ${DEBUG_IMAGE} ${TARGET_INSTALL_DIR}/boot/${DEBUG_IMAGE_FN}
	cp ../firmware-binaries/boot.bin ${TARGET_INSTALL_DIR}/boot
	cp ../firmware-binaries/grid.rbf ${TARGET_INSTALL_DIR}/boot
	make modules_install INSTALL_MOD_PATH=${TARGET_INSTALL_DIR} KCONFIG_CONFIG=`pwd`/${KCONFIG_CONFIG_STANDARD} ${STANDARD_MAKE_PARAMS}
	make modules_install INSTALL_MOD_PATH=${TARGET_INSTALL_DIR} KCONFIG_CONFIG=`pwd`/${KCONFIG_CONFIG_DEBUG} ${DEBUG_MAKE_PARAMS}

setup-nfs-dir: setup-target-dir
	${RSYNC_INSTALL} ${TARGET_INSTALL_DIR}/boot/ ${TARGET_NFS_INSTALL_DIR}/boot/
	${RSYNC_INSTALL} ${TARGET_INSTALL_DIR}/lib/modules/ ${TARGET_NFS_INSTALL_DIR}/lib/modules/
